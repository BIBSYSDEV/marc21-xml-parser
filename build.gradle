plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.owasp.dependencycheck' version '7.4.0'
    id 'nebula.lint' version '17.7.0'
}

group 'no.unit.marc'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "7.3.1"
}

dependencies {
    implementation group: 'org.marc4j', name: 'marc4j', version: '2.9.2'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.11.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.9.1'

    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}


test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}


pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}


check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}

